/*=================================================================
 *
 * planner.c
 *
 *=================================================================*/
#include <vector>
#include <queue>
#include <unordered_map>
#include <memory>
#include <math.h>
#include <mex.h>

/* Input Arguments */
#define	MAP_IN                  prhs[0]
#define	ROBOT_IN                prhs[1]
#define	TARGET_TRAJ             prhs[2]
#define	TARGET_POS              prhs[3]
#define	CURR_TIME               prhs[4]
#define	COLLISION_THRESH        prhs[5]


/* Output Arguments */
#define	ACTION_OUT              plhs[0]

//access to the map is shifted to account for 0-based indexing in the map, whereas
//1-based indexing in matlab (so, robotpose and goalpose are 1-indexed)
#define GETMAPINDEX(X, Y, XSIZE, YSIZE) ((Y-1)*XSIZE + (X-1))

#if !defined(MAX)
#define	MAX(A, B)	((A) > (B) ? (A) : (B))
#endif

#if !defined(MIN)
#define	MIN(A, B)	((A) < (B) ? (A) : (B))
#endif

#define NUMOFDIRS 8

// Heuristic weight
int weight = 1;

// Create a struct to hold the properties of each cell
struct cell {
    int x;
    int y;
    int h;
    bool EXPLORED = false;
};

// Create a struct to hold the properties of each node
struct node {
    int g;
    int t;
    int f;
    cell* c;
    //node* parent;
    std::shared_ptr<node> parent;
    bool CLOSED = false;
    bool GOAL = false;
};

// Create a struct to hold the path coordinates
struct path_node {
    int x;
    int y;
};

static std::vector<path_node> robot_path;

// Comparator function used by the priority queue to organize nodes by f values
struct compare_nodes {
    bool operator()(const std::shared_ptr<node> node1, const std::shared_ptr<node> node2) const {
        return node1->f > node2->f;
    }
};

// Function to linearize a 3D space
long long linearize(int x, int y, int t, int width, int height, int duration) {
    return x + y * width + t * width * height;
}

// Trace back to the starting node while sending data to a file
void traceback(std::shared_ptr<node> s, int initial_x, int initial_y) {
    
    // Check if we've reached the starting node
    while (s->c->x != initial_x || s->c->y != initial_y) {
        
        // Print out results
        //printf("traceback - x: %d, y: %d, t: %d\n", s->c->x, s->c->y, s->t);
        
        // Create a path node with the x and y coordinates
        path_node n = {s->c->x, s->c->y};
        
        // Add the path node to the static robot path vector
        robot_path.push_back(n);
        
        // Set the address of node s to the parent of itself to go backwards
        s = s->parent;
    }
    
    
    
    
}


static void planner(
        double*	map,
        int collision_thresh,
        int x_size,
        int y_size,
        int robotposeX,
        int robotposeY,
        int target_steps,
        double* target_traj,
        int targetposeX,
        int targetposeY,
        int curr_time,
        double* action_ptr
        )
{
    // 8-connected grid
    int dX[NUMOFDIRS] = {-1, -1, -1,  0,  0,  1, 1, 1};
    int dY[NUMOFDIRS] = {-1,  0,  1, -1,  1, -1, 0, 1};
    
    printf("Current Time: %d\n", curr_time);
    
    // Run this if the path vector is empty
    if (robot_path.empty()) {
    
        //////////// Reverse Multi-Goal Djistra's Algorihtm /////////////////

        // Create a 2d grid to hold the cells
        std::vector<std::vector<cell>> grid(x_size, std::vector<cell>(y_size));

        // Create a queue for Dijstra's search that holds the cell's addresses
        std::queue<cell*> ds_queue;

        // Initialize the cells corresponding to the trajectory coordinates and add them to the queue
        for (int i=0; i<target_steps; i++) {

            // Set the values of the cell corresponding with the trajectory coordinates
            int x = (int) target_traj[i];
            int y = (int) target_traj[target_steps + i];
            grid[x][y].x = x;
            grid[x][y].y = y;

            // Set the hueristic value of the cell
            grid[x][y].h = 0;

            // Push this cell's address onto the queue
            ds_queue.push(&grid[x][y]);

            // Print out the trajectories after being added to the queue
            //printf("Grid - x: %d, y: %d, h: %d\n", grid[x][y].x, grid[x][y].y, grid[x][y].h);
        }

        // Search around using djistra's algorithm from the trajectory cells
        while (!ds_queue.empty()) {

            // Access the next cell's address from the queue
            cell* s = ds_queue.front();
            //printf("cell s - x: %d, y: %d, h: %d\n", s->x, s->y, s->h); // TODO: modulo condition later

            // Remove the next cell's address from the queue
            ds_queue.pop();

            // Check for surrounding nodes
            for (int i=0; i<NUMOFDIRS; i++) {

                // Determine the next x and y coordinates
                int new_x = s->x + dX[i];
                int new_y = s->y + dY[i];

                // Check if the new x and y values are within the boundaries of the map
                if (new_x >= 0 && new_x < x_size && new_y >= 0 && new_y < y_size) {

                    // Find the cost of the cell from the map
                    int new_cell_cost = (int)map[new_y * x_size + new_x];

                    // Checks whether the new position is greater than or equal to 0 and below the collision threshold
                    if (new_cell_cost >= 0 && new_cell_cost < collision_thresh) {

                        // Check if the cell has been explored or can be updated (new h less than current h)
                        if (grid[new_x][new_y].h > s->h + new_cell_cost || grid[new_x][new_y].EXPLORED == false) {

                            // Set the x and y values of the cell
                            grid[new_x][new_y].x = new_x;
                            grid[new_x][new_y].y = new_y;

                            // Set the new h value
                            grid[new_x][new_y].h = s->h + new_cell_cost;

                            // Add the address of the grid cell to the queue and mark it as explored
                            ds_queue.push(&grid[new_x][new_y]);
                            grid[new_x][new_y].EXPLORED = true;

                            //printf("cell s' - x: %d, y: %d, h: %d\n", grid[new_x][new_y].x, grid[new_x][new_y].y, grid[new_x][new_y].h);
                        }
                    }
                }
            }
        }

        printf("D Search Done\n");


        ///////////////////////// A* Algorihtm //////////////////////////////

        // Create an unordered map to hold the shared node pointers indexed by linearized <x,y,t> coordinates representing the node "space"
        std::unordered_map<long long, std::shared_ptr<node>> space;

        // Create the goal nodes and add them to the unordered map
        for (int t=0; t<target_steps; t++) {

            // Determine the x and y coordinates of the trajectory
            int x = (int) target_traj[t];
            int y = (int) target_traj[target_steps + t];

            // Create a key using the linearize function
            long long key = linearize(x, y, t, x_size, y_size, target_steps);

            // Create a pointer to a node object and dynamically allocate memory for the node
            std::shared_ptr<node> n = std::make_shared<node>();

            // Save the address of the node as the value at the key in the map
            space[key] = n;

            // Save the node's cell address
            space[key]->c = &grid[x][y];

            // Set the time of the node
            space[key]->t = t;

            // Set the node as a goal node
            space[key]->GOAL = true;

            // Set the other node parameters to defaults
            space[key]->g = 0;
            space[key]->f = 0;
            space[key]->parent = nullptr;
        }

        // Create a priority queue to explore with the shared node pointer datatype, using a vector of shared node pointers, and a custom comparison function that compares the f values of the nodes
        std::priority_queue<std::shared_ptr<node>, std::vector<std::shared_ptr<node>>, compare_nodes> OPEN;

        // Determine the key of the starting node using the linearize function
        long long key = linearize(robotposeX, robotposeY, 0, x_size, y_size, target_steps);

        // Create the shared node pointer that points to the newly made starting node
        std::shared_ptr<node> n = std::make_shared<node>();

        // Create the key-value pair in the unordered map
        space[key] = n;

        // Initialize the starting node (at t = 0)
        space[key]->c = &grid[robotposeX][robotposeY];
        space[key]->t = 0;
        space[key]->g = 0;
        space[key]->f = space[key]->c->h * weight;
        space[key]->parent = nullptr;

        // Add the shared node pointer coresponding to the starting node onto the OPEN queue
        OPEN.push(space[key]);

        /*
        // Test the ability to create a key and find an existing node
        printf("Robot is at x: %d, y: %d\n", robotposeX, robotposeY);
        long long key2 = linearize(robotposeX, robotposeY, 0, x_size, y_size, target_steps);
        if (space[key2]->c->x = robotposeX && space[key2]->c->y == robotposeY) {
            printf("node found at x: %d, y: %d, t: %d, h: %d\n", space[key]->c->x, space[key]->c->y, space[key]->t, space[key]->c->h);
        }
        printf("cell s - x: %d, y: %d, h: %d\n", grid[robotposeX][robotposeY].x, grid[robotposeX][robotposeY].y, grid[robotposeX][robotposeY].h);
        printf("key 1: %d, key 2: %d\n", key, key2);
        */

        // Begin the A* algorithm and continue expanding nodes until OPEN is empty (or a goal node is reached)
        while (!OPEN.empty()) {

            // Remove the shared node pointer (node* s) with the smallest f-value (next node in OPEN priority queue)
            std::shared_ptr<node> s = OPEN.top();
            OPEN.pop();

            //printf("node s - x: %d, y: %d, t: %d, h: %d\n", s->c->x, s->c->y, s->t, s->c->h);

            // Set node* s to closed because it is about to be expanded
            s->CLOSED = true;

            // Check if node s is a goal node
            if (s->GOAL == true) {

                printf("Goal state reached at: x=%d, y=%d, t=%d\n", s->c->x, s->c->y, s->t);

                // Run the traceback function to determine the past coordinates and copy to a file
                traceback(s, robotposeX, robotposeY);

                // Break out of the while loop
                break;
            }

            // Expand the node at the address of the shared pointer s
            // For every successor s' of s that is not CLOSED
            for (int i=0; i<NUMOFDIRS; i++) {

                // Determine the next possible coordinates
                int new_x = s->c->x + dX[i];
                int new_y = s->c->y + dY[i];
                int new_t = s->t + 1;

                // Check if the possible coordinates are within the 3-dimensional space
                if (new_x >= 0 && new_x < x_size && new_y >= 0 && new_y < y_size && new_t >= 0 && new_t < target_steps) {

                    // Find the cost of the node from the map
                    int new_node_cost = (int)map[new_y * x_size + new_x];

                    // Checks whether the new position is greater than or equal to 0 and below the collision threshold
                    if (new_node_cost >= 0 && new_node_cost < collision_thresh) {

                        // Create a key for the new node using x, y, and t coordinates
                        long long key = linearize(new_x, new_y, new_t, x_size, y_size, target_steps);

                        // Check if the key-value pair exists
                        auto it = space.find(key);

                        // If the key-value pair doesn't exist, create it and add it's address as a key-value pair to the unordered map
                        if (it == space.end()) {
                            std::shared_ptr<node> n = std::make_shared<node>();
                            space[key] = n;
                        }

                        // Check if the node has been CLOSED (already expanded)
                        if (!space[key]->CLOSED) {

                            // Check if the g-value of the successor s' is greater than the current g-value + the edge cost
                            // Or if the g-value has not yet been set (g = 0)
                            if (space[key]->g > s->g + new_node_cost || space[key]->g == 0) {

                                // Set the space with the new g-value
                                space[key]->g = s->g + new_node_cost;

                                // Connect the node to it's corresponding cell
                                space[key]->c = &grid[new_x][new_y];

                                // Add up the new f-value
                                space[key]->f = space[key]->g + space[key]->c->h * weight;

                                // Set the parent node pointer to the current s node
                                space[key]->parent = s;

                                // Set the time it took to reach the node
                                space[key]->t = new_t;

                                // Insert the new node into the OPEN priority queue
                                OPEN.push(space[key]);

                                //printf("node s' - x: %d, y: %d, t: %d, h: %d\n", space[key]->c->x, space[key]->c->y, space[key]->t, space[key]->c->h);
                            }
                        }
                    }
                }
            }
        }

        //printf("A* Search Done");
    }
    
    
    // Remove the next x and y coordinates from the vector of coordinates
    path_node n = robot_path.back();
    robot_path.pop_back();
    
    // Set the next x and y coordinates to the robot's position
    robotposeX = n.x;
    robotposeY = n.y;
    
    printf("Robot x: %d, y: %d\n", robotposeX, robotposeY);
    
    action_ptr[0] = robotposeX;
    action_ptr[1] = robotposeY;
    
    return;
}

// prhs contains input parameters (4):
// 1st is matrix with all the obstacles
// 2nd is a row vector <x,y> for the robot position
// 3rd is a matrix with the target trajectory
// 4th is an integer C, the collision threshold for the map
// plhs should contain output parameters (1):
// 1st is a row vector <dx,dy> which corresponds to the action that the robot should make
void mexFunction( int nlhs, mxArray *plhs[],
        int nrhs, const mxArray*prhs[] )
        
{
    
    /* Check for proper number of arguments */
    if (nrhs != 6) {
        mexErrMsgIdAndTxt( "MATLAB:planner:invalidNumInputs",
                "Six input arguments required.");
    } else if (nlhs != 1) {
        mexErrMsgIdAndTxt( "MATLAB:planner:maxlhs",
                "One output argument required.");
    }
    
    /* get the dimensions of the map and the map matrix itself*/
    int x_size = mxGetM(MAP_IN);
    int y_size = mxGetN(MAP_IN);
    double* map = mxGetPr(MAP_IN);
    
    /* get the dimensions of the robotpose and the robotpose itself*/
    int robotpose_M = mxGetM(ROBOT_IN);
    int robotpose_N = mxGetN(ROBOT_IN);
    if(robotpose_M != 1 || robotpose_N != 2){
        mexErrMsgIdAndTxt( "MATLAB:planner:invalidrobotpose",
                "robotpose vector should be 1 by 2.");
    }
    double* robotposeV = mxGetPr(ROBOT_IN);
    int robotposeX = (int)robotposeV[0];
    int robotposeY = (int)robotposeV[1];
    
    /* get the dimensions of the goalpose and the goalpose itself*/
    int targettraj_M = mxGetM(TARGET_TRAJ);
    int targettraj_N = mxGetN(TARGET_TRAJ);
    
    if(targettraj_M < 1 || targettraj_N != 2)
    {
        mexErrMsgIdAndTxt( "MATLAB:planner:invalidtargettraj",
                "targettraj vector should be M by 2.");
    }
    double* targettrajV = mxGetPr(TARGET_TRAJ);
    int target_steps = targettraj_M;
    
    /* get the current position of the target*/
    int targetpose_M = mxGetM(TARGET_POS);
    int targetpose_N = mxGetN(TARGET_POS);
    if(targetpose_M != 1 || targetpose_N != 2){
        mexErrMsgIdAndTxt( "MATLAB:planner:invalidtargetpose",
                "targetpose vector should be 1 by 2.");
    }
    double* targetposeV = mxGetPr(TARGET_POS);
    int targetposeX = (int)targetposeV[0];
    int targetposeY = (int)targetposeV[1];
    
    /* get the current timestep the target is at*/
    int curr_time = mxGetScalar(CURR_TIME);
    
    /* Create a matrix for the return action */ 
    ACTION_OUT = mxCreateNumericMatrix( (mwSize)1, (mwSize)2, mxDOUBLE_CLASS, mxREAL); 
    double* action_ptr = (double*) mxGetData(ACTION_OUT);
    
    /* Get collision threshold for problem */
    int collision_thresh = (int) mxGetScalar(COLLISION_THRESH);
    
    /* Do the actual planning in a subroutine */
    planner(map, collision_thresh, x_size, y_size, robotposeX, robotposeY, target_steps, targettrajV, targetposeX, targetposeY, curr_time, &action_ptr[0]);
    // printf("DONE PLANNING!\n");
    return;   
}